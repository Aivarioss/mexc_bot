import os
import time
import threading
from datetime import datetime
from collections import defaultdict
import datetime as dt
from config.settings import is_test_mode
from utils.file_helpers import load_json, save_json
from modules.price_tracker import track_token
from utils.telegram_alerts import escape_markdown

# === Ceƒºi ===
TRACKED_TOKENS_FILE = "data/tracked_tokens.json"
TEST_TRACKED_TOKENS_FILE = "data/test_tracked_tokens.json"
TRADE_HISTORY_FILE = "data/trade_history.json"
TEST_TRADE_HISTORY_FILE = "data/test_trade_history.json"

def clear_tracked_tokens(exchange):
    tracked = load_json(TRACKED_TOKENS_FILE)
    if not tracked:
        return []

    try:
        balance = exchange.fetch_balance()
    except Exception as e:
        print(f"‚ö†Ô∏è NeizdevƒÅs ieg≈´t bilanci: {e}")
        return []

    removed = []
    for symbol in list(tracked.keys()):
        base = symbol.replace("USDT", "")
        token_amount = balance.get("total", {}).get(base, 0)

        if not token_amount or token_amount < 0.0001:
            print(f"üßπ Notƒ´ram no tracked: {symbol} (bilance 0)")
            removed.append(symbol)
            del tracked[symbol]

    save_json(TRACKED_TOKENS_FILE, tracked)
    return removed
    
def resync_tracked_tokens(exchange=None, test_mode=False):
    """
    Sinhronizƒì tracked tokenus no trade vƒìstures un bir≈æas bilances.
    Atjauno pozƒ´cijas, pievieno tr≈´ksto≈°os tokenus, izdzƒì≈° neeso≈°os.
    """
    import threading
    from datetime import datetime

    tracked_file = TEST_TRACKED_TOKENS_FILE if test_mode or is_test_mode() else TRACKED_TOKENS_FILE
    history_file = TEST_TRADE_HISTORY_FILE if test_mode or is_test_mode() else TRADE_HISTORY_FILE

    history = load_json(history_file, default=[])
    tracked = load_json(tracked_file, default={})
    open_positions = {}
    changed = False

    # Ignorƒìjamie simboli (HODL vai ilgtermi≈Üa)
    ignored_symbols = {"PIUSDT", "XRPUSDT"}

    # 1. Solis: No vƒìstures atrast atvƒìrtos pirkumus
    for trade in history:
        symbol = trade.get("symbol")
        if not symbol or symbol in ignored_symbols:
            continue

        if trade["type"] in ["buy", "test_buy"]:
            open_positions[symbol] = {
                "buy_price": trade["price"],
                "amount": trade["amount"],
                "strategy": trade.get("strategy", "unknown"),
                "timestamp": datetime.utcfromtimestamp(trade["timestamp"]).isoformat() + "Z",
                "ai_confidence": trade.get("ai_confidence", 0.85),
                "tp_levels": [1.05, 1.10, 1.20, 1.30],
                "sl_threshold": 0.05,
                "max_price": trade["price"],
                "executed_tp_levels": [],
                "volatility": 0.03,
                "feedback_score": 0.0
            }
        elif trade["type"] in ["sell", "test_sell"] and symbol in open_positions:
            del open_positions[symbol]

    # 2. Solis: Pievieno atvƒìrtƒÅs pozƒ´cijas uz tracked
    for symbol, data in open_positions.items():
        if symbol not in tracked:
            print(f"üîÅ Resync: no vƒìstures pievienots {symbol}")
            tracked[symbol] = data
            changed = True
            if exchange:
                threading.Thread(target=track_token, args=(symbol, exchange), daemon=True).start()

    # 3. Solis: Pievieno tokenus no konta, ja nav tracked
    if exchange:
        try:
            balance = exchange.fetch_balance()
            existing_tracked = set(tracked.keys())

            for asset, amount in balance.get('total', {}).items():
                if asset in ["USDT", "MX"] or not amount or amount < 0.0001:
                    continue

                amount = float(amount)
                symbol = f"{asset}USDT"

                if symbol in ignored_symbols:
                    print(f"üö´ Ignorƒìjam {symbol} ‚Äî iekƒºauts ilgtermi≈Üa sarakstƒÅ.")
                    continue

                if symbol in tracked and tracked[symbol].get("amount", 0) <= 0.00001:
                    print(f"üîÅ Atjaunojam {symbol} ‚Äî bir≈æƒÅ amount = {amount}")
                    tracked[symbol]["amount"] = round(amount, 6)
                    changed = True
                    continue

                if symbol not in existing_tracked:
                    print(f"üîÑ Resync no konta: {symbol} (amount: {amount})")

                    # Mƒìƒ£inƒÅm ieg≈´t pirkuma cenu no bir≈æas vƒìstures
                    buy_price = 0.0
                    try:
                        trades = exchange.fetch_my_trades(symbol)
                        buys = [t for t in trades if t["side"] == "buy"]
                        if buys:
                            total_cost = sum(t["cost"] for t in buys if t["cost"])
                            total_amount = sum(t["amount"] for t in buys if t["amount"])
                            if total_amount > 0:
                                buy_price = round(total_cost / total_amount, 6)
                    except Exception as e:
                        print(f"‚ö†Ô∏è NeizdevƒÅs ieg≈´t {symbol} pirkuma cenu: {e}")

                    tracked[symbol] = {
                        "buy_price": buy_price,
                        "amount": round(amount, 6),
                        "strategy": "resynced",
                        "timestamp": datetime.utcnow().isoformat() + "Z",
                        "ai_confidence": 0.85,
                        "tp_levels": [1.05, 1.10, 1.20, 1.30],
                        "sl_threshold": 0.05,
                        "max_price": buy_price,
                        "executed_tp_levels": [],
                        "volatility": 0.03,
                        "feedback_score": 0.0
                    }
                    changed = True
                    threading.Thread(target=track_token, args=(symbol, exchange), daemon=True).start()

            # 4. Solis: Izdzƒì≈° tokenus ar amount = 0 un bez atlikuma bir≈æƒÅ
            for symbol in list(tracked.keys()):
                if symbol in ignored_symbols:
                    continue
                amount = tracked[symbol].get("amount", 0)
                if amount <= 0.00001:
                    coin = symbol.replace("USDT", "")
                    balance_amount = balance['total'].get(coin, 0)
                    if not balance_amount or balance_amount < 0.0001:
                        print(f"üßπ No≈Üemam {symbol} ‚Äî nav amount un nav atlikuma bir≈æƒÅ.")
                        del tracked[symbol]
                        changed = True

        except Exception as e:
            print(f"‚ö†Ô∏è NeizdevƒÅs nolasƒ´t bir≈æas bilanci resync laikƒÅ: {e}")

    # 5. SaglabƒÅ rezultƒÅtu
    if changed:
        save_json(tracked_file, tracked)
        print(f"‚úÖ Resync pabeigts ({len(tracked)} tokeni tracked).")
    else:
        print(f"‚ÑπÔ∏è Resync pabeigts ‚Äî nekƒÅdas izmai≈Üas ({len(tracked)} tokeni).")

def log_trade(trade_data):
    is_test = trade_data.get("type", "").startswith("test_")
    file_path = TEST_TRADE_HISTORY_FILE if is_test else TRADE_HISTORY_FILE
    history = load_json(file_path, default=[])
    history.append(trade_data)
    save_json(file_path, history)
    print(f"üìù {'TEST ' if is_test else ''}Darƒ´jums pierakstƒ´ts: {trade_data['symbol']} ({trade_data['type']})")

def get_test_summary():
    history = load_json(TEST_TRADE_HISTORY_FILE, default=[])
    buys = [t for t in history if t["type"] == "test_buy"]
    sells = [t for t in history if t["type"] == "test_sell"]

    if not history:
        return "üì≠ Nav neviena test darƒ´juma."

    lines = [
        f"üß™ *Test darƒ´jumu kopsavilkums:*",
        f"üì• Test pirkumi: {len(buys)}",
        f"üì§ Test pƒÅrdo≈°anas: {len(sells)}",
        f"üì¶ KopƒÅ darƒ´jumu: {len(history)}",
    ]

    last = history[-1]
    lines.append(f"üïí Pƒìdƒìjais: {last['symbol']} | {last['type']} | {dt.datetime.utcfromtimestamp(last['timestamp']).strftime('%Y-%m-%d %H:%M:%S')}")

    return "\n".join(lines)

def get_tracked_summary(test_mode=False, force_real=False):
    if force_real:
        file_path = TRACKED_TOKENS_FILE
    else:
        file_path = TEST_TRACKED_TOKENS_FILE if test_mode or is_test_mode() else TRACKED_TOKENS_FILE

    tracked = load_json(file_path)

    if not tracked:
        return "üì≠ Pa≈°laik netiek sekots nevienam tokenam." if not test_mode else "üß™ Test re≈æƒ´mƒÅ netiek sekots nevienam tokenam."

    label = "üìà *Aktƒ´vie sekojamie tokeni:*" if not test_mode else "üß™ *Test re≈æƒ´ma sekojamie tokeni:*"
    lines = [label]
    for symbol, info in tracked.items():
        price = info.get("buy_price", 0)
        amount = info.get("amount", 0)
        strategy = info.get("strategy", "?")
        lines.append(f"‚Ä¢ {escape_markdown(symbol)} | Cena: {price:.4f} | Daudzums: {amount:.4f} | Stratƒìƒ£ija: {escape_markdown(strategy)}")

    return "\n".join(lines)

def get_help_message():
    return (
        "üÜò *Telegram bot komandas:*\n\n"
        "ü§ñ *Tirdzniecƒ´bas cikls:*\n"
        "/startbot ‚Äì Palaist bota tirdzniecƒ´bas ciklu\n"
        "/stopbot ‚Äì Apturƒìt bota ciklu\n"
        "/stopall ‚Äì Apturƒìt visus bota ciklu\n"
        "/restartbot ‚Äì Restartƒìt botu\n"
        "/restartloop ‚Äì Restartƒìt telegramloop\n\n"
        "üß† *AI trenƒì≈°ana:*\n"
        "/starttrain ‚Äì Startƒì AI treni≈Üu (4 posmi)\n"
        "/stoptrain ‚Äì Aptur AI treni≈Üu\n"
        "/retrainfeedback ‚Äì Trenƒì feedback AI no labeled datiem\n\n"
        "üß™ *Testƒì≈°anas re≈æƒ´ms:*\n"
        "/testmodeon ‚Äì Aktivizƒìt TEST_MODE (mƒ´kstƒÅki filtri, nav pirkumu)\n"
        "/teststatus ‚Äì Tast aktƒ´vie procesi\n"
        "/testmodeoff ‚Äì Deaktivizƒìt TEST_MODE (iespƒìjama reƒÅla tirdzniecƒ´ba)\n\n"
        "üìä *Darbƒ´bas kopsavilkumi:*\n"
        "/status ‚Äì Aktƒ´vie procesi\n"
        "/sentiment ‚Äì Tirgus tendence\n"
        "/ping ‚Äì Vai bots darbojas?\n"
        "/summary ‚Äì ƒ™ss tirdzniecƒ´bas kopsavilkums\n"
        "/testsummary ‚Äì ƒ™ss test tirdzniecƒ´bas kopsavilkums\n"
        "/testactivity ‚Äì Test AI aktivitƒÅtes kopsavilkums\n"
        "/activity ‚Äì AI aktivitƒÅtes kopsavilkums\n\n"
        "üì¶ *Token seko≈°ana:*\n"
        "/tracked ‚Äì Saraksts ar sekojamajiem tokeniem\n"
        "/testtracked ‚Äì Saraksts ar test sekojamajiem tokeniem\n"
        "/resync ‚Äì Sinhronizƒìt tracked tokenus ar bilanci\n"
        "/cleartracked ‚Äì Notƒ´rƒ´t tokenus, kuru tev vairs nav\n"
        "/balance ‚Äì ParƒÅda USDT bilanci bir≈æƒÅ\n\n"
        "üßπ *Apkope:*\n"
        "/clearmodels ‚Äì Notƒ´ra modeƒºus,ja pievieno jaunus indikatorus \n"
        "/cleartestdata ‚Äì Notƒ´ra vecos Test datus\n"      
        "/cleanup ‚Äì Dzƒì≈° vecos CSV failus (>3 dienƒÅm)\n\n"
        "‚ÑπÔ∏è /help ‚Äì ≈†ƒ´ palƒ´dzƒ´bas izvƒìlne"
    )

def get_usdt_balance(exchange):
    try:
        balance = exchange.fetch_balance()
        usdt_info = balance.get("USDT", {})
        free_usdt = usdt_info.get("free", 0)
        total_usdt = usdt_info.get("total", 0)

        report = [
            f"üí∞ *USDT bilance:*",
            f"Brƒ´vi: {free_usdt:.2f} USDT",
            f"KopƒÅ: {total_usdt:.2f} USDT",
            "\nüì¶ *Citi tokeni makƒÅ:*"
        ]

        asset_count = 0
        for asset, total_token in balance.get('total', {}).items():
            if asset in ["USDT", "MX"]:
                continue

            if total_token and total_token > 0.0001:
                try:
                    symbol = f"{asset}/USDT"
                    ticker = exchange.fetch_ticker(symbol)
                    price = ticker.get("last", 0)
                    value_usdt = total_token * price
                    report.append(f"‚Ä¢ {asset}: {total_token:.4f} ‚âà {value_usdt:.2f} USDT")
                    asset_count += 1
                except:
                    report.append(f"‚Ä¢ {asset}: {total_token:.4f} (nav cenu info)")

        if asset_count == 0:
            report.append("‚Ä¢ Nav citu tokenu makƒÅ.")

        return "\n".join(report)

    except Exception as e:
        return f"\n‚ö†Ô∏è NeizdevƒÅs ieg≈´t bilanci: {e}"
